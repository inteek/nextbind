//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class InteekServiceEntities : DbContext
    {
        public InteekServiceEntities()
            : base("name=InteekServiceEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ExceptionLog> ExceptionLog { get; set; }
    
        public virtual ObjectResult<ValidaLogin_Result> ValidaLogin(string usuario, string password)
        {
            var usuarioParameter = usuario != null ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ValidaLogin_Result>("ValidaLogin", usuarioParameter, passwordParameter);
        }
    
        public virtual int RegistraDatosUsuario(string nombre, string apellidop, string apellidom, string correo, string password, string domiciliodir, string domiciliocord, Nullable<int> perfil)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidopParameter = apellidop != null ?
                new ObjectParameter("apellidop", apellidop) :
                new ObjectParameter("apellidop", typeof(string));
    
            var apellidomParameter = apellidom != null ?
                new ObjectParameter("apellidom", apellidom) :
                new ObjectParameter("apellidom", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var domiciliodirParameter = domiciliodir != null ?
                new ObjectParameter("domiciliodir", domiciliodir) :
                new ObjectParameter("domiciliodir", typeof(string));
    
            var domiciliocordParameter = domiciliocord != null ?
                new ObjectParameter("domiciliocord", domiciliocord) :
                new ObjectParameter("domiciliocord", typeof(string));
    
            var perfilParameter = perfil.HasValue ?
                new ObjectParameter("perfil", perfil) :
                new ObjectParameter("perfil", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegistraDatosUsuario", nombreParameter, apellidopParameter, apellidomParameter, correoParameter, passwordParameter, domiciliodirParameter, domiciliocordParameter, perfilParameter);
        }
    
        public virtual int RegistraTicket(Nullable<int> id_cliente, string titulo, string descripcion, Nullable<int> tiposervicio, Nullable<int> idarea, string ruta, Nullable<int> estatus)
        {
            var id_clienteParameter = id_cliente.HasValue ?
                new ObjectParameter("id_cliente", id_cliente) :
                new ObjectParameter("id_cliente", typeof(int));
    
            var tituloParameter = titulo != null ?
                new ObjectParameter("titulo", titulo) :
                new ObjectParameter("titulo", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            var tiposervicioParameter = tiposervicio.HasValue ?
                new ObjectParameter("tiposervicio", tiposervicio) :
                new ObjectParameter("tiposervicio", typeof(int));
    
            var idareaParameter = idarea.HasValue ?
                new ObjectParameter("idarea", idarea) :
                new ObjectParameter("idarea", typeof(int));
    
            var rutaParameter = ruta != null ?
                new ObjectParameter("ruta", ruta) :
                new ObjectParameter("ruta", typeof(string));
    
            var estatusParameter = estatus.HasValue ?
                new ObjectParameter("estatus", estatus) :
                new ObjectParameter("estatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegistraTicket", id_clienteParameter, tituloParameter, descripcionParameter, tiposervicioParameter, idareaParameter, rutaParameter, estatusParameter);
        }
    
        public virtual int AsignaTicket(Nullable<int> id_usuario, Nullable<int> id_agente, Nullable<int> id_ticket, Nullable<int> id_estatus)
        {
            var id_usuarioParameter = id_usuario.HasValue ?
                new ObjectParameter("id_usuario", id_usuario) :
                new ObjectParameter("id_usuario", typeof(int));
    
            var id_agenteParameter = id_agente.HasValue ?
                new ObjectParameter("id_agente", id_agente) :
                new ObjectParameter("id_agente", typeof(int));
    
            var id_ticketParameter = id_ticket.HasValue ?
                new ObjectParameter("id_ticket", id_ticket) :
                new ObjectParameter("id_ticket", typeof(int));
    
            var id_estatusParameter = id_estatus.HasValue ?
                new ObjectParameter("id_estatus", id_estatus) :
                new ObjectParameter("id_estatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AsignaTicket", id_usuarioParameter, id_agenteParameter, id_ticketParameter, id_estatusParameter);
        }
    }
}
